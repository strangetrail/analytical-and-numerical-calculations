/*
# vi:syntax=maxima
*/

/*****************************************************************************/
/*                                 utils.hmax                                */
/*****************************************************************************/


/* Definitions for exporting expressons into C/C++ source code: */
/* The suffix in file names and relative paths are hardcoded: */
CXX_FILE_NAME_SUFFIX : "___export";
CXX_FILE_PATH_SRC : "src";
CXX_FILE_PATH_INC : "inc";


/* Variables for exporting expressons into C/C++ source code: */
cxxFunctionTextWrapperSourceCode :                                     \
  sconcat                                                              \
  (                                                                    \
    "#include <stdlib.h>~%",                                           \
    "#include <math.h>~%",                                             \
    "#include \"~a.hpp\"~%~%~%",                                       \
    "long double cotan ( long double a )~%",                           \
    "{~%",                                                             \
    "~treturn ( ((long double) 1.0) / ((long double) tan ( a )) );~%", \
    "}~%~%",                                                           \
    "~a ~a ( ~a )~%",                                                  \
    "{~%",                                                             \
    "~treturn ( ~a );~%",                                              \
    "}"                                                                \
  );                                                                    
cxxFunctionTextWrapperHeader : \
  sconcat                      \
  (                            \
    "#ifndef ~a_hpp__~%",      \
    "#define ~a_hpp__~%~%~%",  \
    "~a ~a ( ~a );~%~%",       \
    "#endif  // ~a_hpp__"      \
  );                            


/*****************************************************************************/
/*                                  SIMPLIFY                                 */
/*****************************************************************************/

/*
SAGElikeFullSimplify ( expr2simplify ) := block
(
	return ( xthru ( fullratsimp ( ratsimp ( logcontract (             \
	         xthru ( fullratsimp ( ratsimp ( trigsimp ( minfactorial ( \
	         expr2simplify ) ) ) ) ) ) ) ) )                           \
	       )                                                            
),
*/

/*****************************************************************************/

Sqrt ( someidx ) := block
(
	return ( thisisasqrt )
);

Sum ( someidx ) := block
(
	return ( thisisasum )
);

Product ( someidx ) := block
(
	return ( thisisaproduct )
);

/* TODO : Complete recursive subexpression search and implement it for */
/*         sqrt(-1) and analysis of complex roots in automatic code    */
/*         generation.                                                 */

/*
get_sqrt_from_expr ( expr ) := block
(
	local ( sqrtRes, whatisthisexpr ),

	whatisthisexpr : reveal ( expr, 1 ),
	if ( atom ( expr ) )
	then
		return ()
	if ( whatisthisexpr = thisisasqrt )
	then
		return ( expr )
	else
		map ( get_sqrt_from_expr, expr ),

	return ( und )
);
*/

factormapcond ( expression2analyse ) := block
(
	/* BGN DEBUG */
	DEBUGPRINT ( "Inside factormapcond" ),
	/* END DEBUG */
	whatisthisexpr : reveal( expression2analyse, 1 ),
	whatisthis : ev ( whatisthisexpr ),
	if ( (whatisthis = thisisasum) or (whatisthis = thisisaproduct) or (whatisthis = Negterm) )
	then
		block
		(
			if ( whatisthis = thisisasum )
			then block
			(
				/* BGN DEBUG */
				DEBUGPRINT ( "fullratsimp begins" ),
				/* END DEBUG */
				expression2reveal : fullratsimp ( expression2analyse ),
				/* BGN DEBUG */
				DEBUGPRINT ( "fullratsimp done" )
				/* END DEBUG */
			)
			else
				expression2reveal : expression2analyse,
			return ( map ( factormapcond, expression2reveal ) )
		)
	else block
	(
		/* BGN DEBUG */
		DEBUGPRINT ( "fullratsimp begins" ),
		/* END DEBUG */
		return ( factorsum(expression2analyse) ),
		/* BGN DEBUG */
		DEBUGPRINT ( "fullratsimp done" )
		/* END DEBUG */
	)
);

SAGElikeLiteSimplify ( expr_ARG ) := block
(
	return ( xthru ( fullratsimp ( ratsimp ( trigsimp ( \
	 expr_ARG ) ) ) ) )                                  
);

SAGElikeFullSimplify ( expr2simplify ) := block
(

	/* BGN DEBUG */
	DEBUGPRINT ( "INSIDE SAGELIKEFULLSIMPLIFY" ),
	/* END DEBUG */

	simp : true,
	ratsimpexpons : true,
	logsimp : true,
	factorflag : false,
	simpsum : true,
	facexpand : false,
	algebraic : true,

	bApplyCustomFactorisation : true,/* DEFAULT TRUE */

	simplified_res : expr2simplify,

	if (bDebugPrint) then printf ( true, "~%~%~a~%~%", simplified_res ),
	if (bApplyCustomFactorisation) then simplified_res : expand ( simplified_res ),/*DEFAULT ON*/
	if (bDebugPrint) then printf ( true, "~%~%expand DONE.~%~%" ),
	/*
	simplified_res : factor ( simplified_res ),
	printf ( true, "~%~%factor initial DONE.~%~%" ),
	simplified_res : factorsum ( simplified_res ),
	printf ( true, "~%~%factorsum initial DONE.~%~%" ),
	*/

	/*
	simplified_res : map(trigexpand , simplified_res ),
	simplified_res : ev (simplified_res),
	*/

	/* 0. By parts */

	/*
	simplified_res : map (minfactorial , simplified_res ),
	*/

	/*
	simplified_res : ev (simplified_res),
	simplified_res : map(rectform ,simplified_res),
	simplified_res : ev (simplified_res),
	simplified_res : map(trigrat ,simplified_res),
	simplified_res : ev (simplified_res),
	simplified_res : map (trigreduce ,simplified_res),
	simplified_res : ev (simplified_res),
	*/

	/*
	simplified_res : map(trigsimp , simplified_res ),
	simplified_res : ev (simplified_res),
	*/

	/*
	simplified_res : map (radcan ,simplified_res),
	simplified_res : ev (simplified_res),

	simplified_res : map(ratsimp , simplified_res ),
	simplified_res : ev (simplified_res),
	simplified_res : map(fullratsimp , simplified_res ),
	simplified_res : ev (simplified_res),
	simplified_res : map(xthru , simplified_res ),
	simplified_res : ev (simplified_res),

	simplified_res : map (logcontract , simplified_res ),
	simplified_res : ev (simplified_res),

	simplified_res : map (ratsimp , simplified_res ),
	simplified_res : ev (simplified_res),
	simplified_res : map (fullratsimp , simplified_res ),
	simplified_res : ev (simplified_res),
	simplified_res : map(xthru , simplified_res ),
	simplified_res : ev (simplified_res),
	*/

	/* 1. Factorials */

	if (bApplyCustomFactorisation) then simplified_res : minfactorial ( simplified_res ),/*DEFAULT ON*/
	/*printf ( true, "~%~%minfactorial DONE.~%~%" ),*/

	/* 2. Trigonometry */

	/*
	simplified_res : rectform (simplified_res),
	*/
	/*
	simplified_res : trigrat (simplified_res),
	printf ( true, "~%~%trigrat DONE.~%~%" ),
	*/
	/*
	simplified_res : trigreduce (simplified_res),
	printf ( true, "~%~%trigreduce DONE.~%~%" ),
	*/

	if (bApplyCustomFactorisation) then simplified_res : trigsimp ( simplified_res ),/*DEFAULT ON*/
	/*printf ( true, "~%~%trigsimp DONE.~%~%" ),*/

	/* 3. Rational parts */

	/*
	simplified_res : map(ratsimp , simplified_res ),
	simplified_res : ev (simplified_res),
	simplified_res : map(fullratsimp , simplified_res ),
	simplified_res : ev (simplified_res),
	simplified_res : map(xthru , simplified_res ),
	simplified_res : ev (simplified_res),
	*/

	/*
	simplified_res : radcan (simplified_res),
	printf ( true, "~%~%radcan DONE.~%~%" ),
	*/

	/*
	simplified_res : rat ( simplified_res ),
	printf ( true, "~%~%rat DONE.~%~%" ),
	*/
	simplified_res : ratsimp ( simplified_res ),/*DEFAULT ON*/
	if (bDebugPrint) then printf ( true, "~%~%ratsimp DONE.~%~%" ),
	simplified_res : fullratsimp ( simplified_res ),/*DEFAULT ON*/
	if (bDebugPrint) then printf ( true, "~%~%fullratsimp DONE.~%~%" ),
	simplified_res : xthru ( simplified_res ),/*DEFAULT ON*/
	if (bDebugPrint) then printf ( true, "~%~%xthru DONE.~%~%" ),

	/* 4. Logarithms */

	if (bApplyCustomFactorisation) then simplified_res : logcontract ( simplified_res ),/*DEFAULT ON*/
	/*printf ( true, "~%~%logcontract DONE.~%~%" ),*/

	/* Something else is expected here */

	/*
	simplified_res : rootscontract ( simplified_res ),
	printf ( true, "~%~%rootscontract DONE.~%~%" ),
	*/

	/*
	simplified_res : factor ( simplified_res ),
	*/

	/* 5. Rational parts again */

	/*
	simplified_res : map(ratsimp , simplified_res ),
	simplified_res : ev (simplified_res),
	simplified_res : map(fullratsimp , simplified_res ),
	simplified_res : ev (simplified_res),
	simplified_res : map(xthru , simplified_res ),
	simplified_res : ev (simplified_res),
	*/

	/*
	simplified_res : rat ( simplified_res ),
	printf ( true, "~%~%rat DONE.~%~%" ),
	*/
	/*simplified_res : ratsimp ( simplified_res ),*/
	/*printf ( true, "~%~%ratsimp DONE.~%~%" ),*/
	/*simplified_res : fullratsimp ( simplified_res ),*/
	/*printf ( true, "~%~%fullratsimp DONE.~%~%" ),*/
	/*simplified_res : xthru ( simplified_res ),*/
	/*printf ( true, "~%~%xthru DONE.~%~%" ),*/

	/*
	simplified_res : radcan (simplified_res),
	printf ( true, "~%~%radcan DONE.~%~%" ),
	*/

	/*
	simplified_res : factor ( simplified_res ),
	*/
	if ( bApplyCustomFactorisation )
	then block
	(
		simplified_res_numer : ratnumer ( simplified_res ),
		/*printf ( true, "~%~%ratnumer DONE.~%~%" ),*/
		simplified_res_denom : ratdenom ( simplified_res ),
		/*printf ( true, "~%~%ratdenom DONE.~%~%" ),*/
		if ( not ( mapatom ( simplified_res_numer ) ) )
		then
			block
			(
				simplified_res_numer : map ( factorsum, simplified_res_numer ),
				/*printf ( true, "~%~%factorsum numer DONE.~%~%" ),*/
				simplified_res_numer : map ( factormapcond, simplified_res_numer )
			),
		if ( not ( mapatom ( simplified_res_denom ) ) )
		then
			block
			(
				simplified_res_denom : map ( factorsum, simplified_res_denom ),
				/*printf ( true, "~%~%factorsum denom DONE.~%~%" ),*/
				simplified_res_denom : map ( factormapcond, simplified_res_denom )
			)
	),

	/*printf ( true, "~%~%simplify DONE.~%~%" ),*/
	if ( bApplyCustomFactorisation )
	then
		return ( simplified_res_numer / simplified_res_denom )
	else
		return ( simplified_res )

);

/***************************************************************************/
/*^^^^^                           SIMPLIFY                            ^^^^^*/
/***************************************************************************/

if ( bDebugPrint )
then
	strDebugPrint : "[DEBUG PRINT]";

DEBUGRND ( DEBUGVAR_ARG ) := block
(
	if ( bDebugPrint )
	then
		return ( random ( 1.0 ) )
	else
		return ( DEBUGVAR_ARG )
);

DEBUGPRINT ( strDebugMessage ) := block
(
	if ( bDebugPrint )
	then
		printf ( true, "~%~%~a  ~a.~%~%", strDebugPrint, strDebugMessage )
);

DEBUGPRINT1 ( strDebugMessage, Variable2Watch ) := block
(
	if ( bDebugPrint )
	then
		printf (                                                            \
		 true, "~%~%~a  ~a:~%~%~a  ~a~%~%", strDebugPrint, strDebugMessage, \
		 strDebugPrint, Variable2Watch                                      \
		)                                                                    
);

DEBUGPRINT2 ( strDebugMessage, Variable2Watch ) := block
(
	if ( bDebugPrint )
	then block
	(
		printf (                                                            \
		 true, "~%~%~a  ~a:~%~%~a~%~%    ", strDebugPrint, strDebugMessage, \
		 strDebugPrint                                                      \
		),                                                                   
		print ( Variable2Watch ),
		printf ( true, "~%~%" )
	)
);

printTexDocBGN ( stream_ARG ) := block
(
	printf ( stream_ARG, "~a~%~a~%~a~%~a~%", \
	         "\\documentclass{article}",     \
	         "\\usepackage{amsmath}",        \
	         "\\usepackage{mathtools}",      \
	         "\\begin{document}"             \
	       ),                                 

	return ( done )
);

printTexDocEND ( stream_ARG ) := block
(
	printf ( stream_ARG, "\\end{document}" ),

	return ( done )
);

printTexDocTEXT ( stream_ARG, text_ARG ) := block
(
	printf ( stream_ARG, "~a~a~a~%~a~%~a~%", \
	         "\\text{", text_ARG, "}",       \
	         "\\newline", "\\newline"        \
	       ),                                 

	return ( done )
);

printTexExpressionInline ( stream, expr ) := block
(
	local ( expr_tex ),

	printf ( stream, "\\begin{equation}~%\\begin{split}~%" ),
	expr_tex : tex ( expr, false ),
	printf ( stream, ssubst ( "", "$$", expr_tex ) ),
	printf ( stream, "\\end{split}~%\\end{equation}~%" ),

	return ( done )
);

printtex ( streamName, exprText, expr ) := block
(
	local ( streamTex ),

	streamNameExt : printf ( false, "~a.maxima.tex", streamName ),
	streamTex : openw ( streamNameExt ),

	printTexDocBGN ( streamTex ),
	/*
	printTexDocTEXT ( streamTex, exprText ),
	*/
	printTexExpressionInline ( streamTex, expr ),
	printTexDocEND ( streamTex ),
	close ( streamTex ),

	return ( done )
);


/* Routine for exporting expressons into C/C++ source code: */
printCXXfunction ( strSrcName,         \
                   strProjectPath,     \
                   stringFunctionName, \
                   stringResultType,   \
                   stringArgs,         \
                   expr                \
                 ) := block             
(
	local                  \
	(                      \
	  streamNameSrc,       \
	  streamNameHdr,       \
	  streamSrc,           \
	  streamHdr,           \
	  strSrcNameExt,       \
	  expr_apply,          \
	  expr_apply_pow,      \
	  rule_nonatoms,       \
	  rule_nonatoms_atoms, \
	  rule_atoms_nonatoms, \
	  rule_atoms,          \
	  a_atom,              \
	  a_nonatom,           \
	  b_atom,              \
	  b_nonatom            \
	),                      


	/* Appending suffixes to names of files: */
	strSrcNameExt : printf ( false, "~a~a", strSrcName, CXX_FILE_NAME_SUFFIX ),

	/* Creating output streams linked with paths ti sources and headers: */
	streamNameSrc : printf ( false, "~a/~a/~a.cpp",             \
	                         strProjectPath, CXX_FILE_PATH_SRC, \
	                         strSrcNameExt                      \
	                       ),                                    
	streamNameHdr : printf ( false, "~a/~a/~a.hpp",             \
	                         strProjectPath, CXX_FILE_PATH_INC, \
	                         strSrcNameExt                      \
	                       ),                                    

	streamSrc : openw ( streamNameSrc ),
	streamHdr : openw ( streamNameHdr ),

	/* Replacing subexpressions like `a^b' to `pow ( a, b )': */
	matchdeclare ( a_atom, atom,                            \
	               b_atom, atom,                            \
	               a_nonatom, lambda ( [x], not atom (x) ), \
	               b_nonatom, lambda ( [x], not atom (x) )  \
	             ),                                          

	defrule ( rule_atoms, a_atom^b_atom,                        \
	          powl ( ldouble ( float ( a_atom ) ), ldouble ( float ( b_atom ) ) )       \
	        ),                                                   
	defrule ( rule_nonatoms, a_nonatom^b_nonatom,               \
	          powl ( ldouble ( float ( a_nonatom ) ), ldouble ( float ( b_nonatom ) ) ) \
	        ),                                                   
	defrule ( rule_nonatoms_atoms, a_nonatom^b_atom,            \
	          powl ( ldouble ( float ( a_nonatom ) ), ldouble ( float ( b_atom ) ) )    \
	        ),                                                   
	defrule ( rule_atoms_nonatoms, a_atom^b_nonatom,            \
	          powl ( ldouble ( float ( a_atom ) ), ldouble ( float ( b_nonatom ) ) )    \
	        ),                                                   

	expr_apply : apply1 ( expr,                \
	                      rule_nonatoms,       \
	                      rule_nonatoms_atoms, \
	                      rule_atoms_nonatoms, \
	                      rule_atoms           \
	                    ),                      

	expr_apply : ev ( expr_apply, numer ),

	/* Changing names of some common functions: */
	expr_apply : ssubst ( "( long double )(",      \
	                      "ldouble(",           \
	                      printf ( false,     \
	                               "~a",      \
	                               expr_apply \
	                             )            \
	                    ),                     
	expr_apply : ssubst ( "( exp (1.0) )", \
	                      "%e",            \
	                      expr_apply       \
	                    ),                  
	expr_apply : ssubst ( "( M_PI )", \
	                      "%pi",      \
	                      expr_apply  \
	                    ),             
	expr_apply : ssubst ( "cotan(", "cot(", expr_apply ),

	/* Exporting source code and header files: */
	printf ( streamSrc,                        \
	         cxxFunctionTextWrapperSourceCode, \
	         strSrcNameExt,                    \
	         stringResultType,                 \
	         stringFunctionName,               \
	         stringArgs,                       \
	         expr_apply                        \
	       ),                                   
	printf ( streamHdr,                    \
	         cxxFunctionTextWrapperHeader, \
	         strSrcNameExt,                \
	         strSrcNameExt,                \
	         stringResultType,             \
	         stringFunctionName,           \
	         stringArgs,                   \
	         strSrcNameExt                 \
	       ),                               

	close (streamSrc),
	close (streamHdr),


	return ( done )
);
